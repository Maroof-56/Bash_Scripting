
 SHELL SCRIPTING
 
    - A shell provide an environment to a user to execute commands & interact with kernel.
    - Shell scripting consists of set of commands to perform task.
    - All command execute sequentially.
    - Some task like manipulation program exectuion user intreaction automation of task etc can be done.
     
                                      Layers 
                                                    
                                   Applications
                        
                                      Shell
                            
                                      Kernel
                            
                                      Hardware
                            
      Types in shell 
      
         - .bash  (most common type)
         - .sh    
         - .ksh
         - .tsh
         - .fish
         - .zsh   (advance version of bash)
         
       Check your  shell type
         
         - echo $0
         
         - cat /etc/shells     ( check supported shells)
         
         - cat /etc/os-release (check os type - )
                        
                        
       SHEBANG  (/usr/bin/bash)
       
         - which bash - to check loc
         - Although it is not necessary to use but use it for standard
         - ctrl c   - to terminate process
         - ctlr z   - to stop
         
       Run the script
       
         - ./script_name    ( Script file should have execute permissionn to execute)
         - bash script_name ( it run the script even if script doesn't have execute permission)
         - /path/to/script_file ( It will run the script if ur not in script folder or somewhere ex: /home/maroof-56/myscripts/basic_script.sh)
          - script file should have execute permission
          - .(dot) represent current file
          
        
       COMMENTS  IN Bash
       
          - Using #  ( This is comment)
          - << comment
             ...
             your comments
             ...
             comment
             
             
       VARIABLES 
       
          - Check  script file 
          
          
       ARRAYS
       
          - Check  script file 
          
          47 minutes done 
          
          
          
       ARRAY KEY_VALUE
       
       
          - Check  script file    to declare that array
          
            - declare -A array_name
            
            
       STRING
       
       
          - Check  script file 
          
          
          
          
          
       USER INTERACTION
          
          
          - Check  script file 
          
          
       Arithmetic Operation
       
         - Check  script file 
         
         
       IF_ELSE 
       
       
       1:44 min
       2:23:46  / 1 Nov 
       
       
       
       
       
       
_____________________________________________________________________________________________________________________



     FUNCTIONS 
     
     
     
     	A Block of code which perform some task & run when it is called..
     	Can be reuse many times in our program which lessen the lines of code.
     	we can pass arguments to method.
     	
     	
     	
     	
    BASENAME 
    
     It gives the file name when u enter the path
     
      basename /home/maroof/mysccripts/test.csv
     o/p - test.csv
     
     
   DIRNAME
   
     It gives the dir name of the file present in
     
         dirname /home/maroof/mysccripts/test.csv
          o/p -      /home/maroof/mysccripts
          
   REALPATH
     
     gives the actual path of file ,dir
     helps for  use in searching
     
      realpath test.csv
      o/p -      /home/maroof/mysccripts/test.csv
      
      
      
   RANDOM 
     
      it generate  random number between 0 to 32767
   
      - echo $RANDOM
      
      
   UID
   
      Gives the user id of user logged in
      
      - echo $UID
      - User UID is always  - 1000
      - Root UID is always  - 0
      
      
   1. $#    - Give the total number of arguments passes to a script or function.
   
   2. $?    - Last command was executed successfully or not.
   
   3. ${0}  - Give you the file name
      
   4. ${1}  - This will hold/store the first arguments that passes through script.
   
   5. $@    - Gives you the list of arguments passes through script.each arg preserve as individual word
   
   6. ${@}  - It will store all the arguments passes thorugh script
   
   7. $$    - process id of the script.
   
   8. Exit status - 126 command not found nor executable return status is
   
                    127 comand not found  child created to executable
                    
   9. dpkg -l | grep docker  - to get exact pakage name & can easily delete.
   
   10. -t
        Ex : read -p(prompt) "our school" school -t 5
            ( simply this prompt will vanish after 5s )
            
   11. -s   
        Instead of -t when u put -s 
            ( this will not print your input instead it can print something different )
        It can used in password prompt.
        
   12. -z  - for zero 
   
   13. grep with many exprsssion such as 
   
       -i - ignore case senstitive
       -o - gives u exact match of the character u give
       -n - show u numbers of line with character
       -w - give u whole  word
       -v - ignore the provided character &print rest

                    
   COMMAND LINE ARGUMENTS
   
      command-line-arguments are the parameter that are passed while executing the script.
      They are also known as poitional parameter
   
   CUT command
   
      Used to cut the section from each line of files.
      Use to cut the line of part by byte,character and field.
      Basically it slice a line & extract the text.
      
      EX : 
      1.  For Extracting any alphabets from line
            In a file there is text in line wise 1.My name is Maroof 2.Sir name is shaikh
      
          - cut b -1 file_name  ( b - bytes )
            o/p  - m  s    ( first byte of each line ) similarly 1,2,3 to extract bytes of you need   
            
            
      2. For extracting any field from line
      
          - cut -d " " -f 1   ( d - delimiter (ignoring space , f - field u want)
            Note: without delimiter field woulnot extract it will print whole line .
            o/p - My  sir
            
    SED 
    
       - SED is a strean editor
       - Peform function like 
           - Viewing the file content
           - searching
           - find & replace
           - insertion & deletion.
           - Complex pattern matching.
           
       - Advantage
           - SED can perform any operation on file without opening the file 
           
       - Commands
       
           - sed '' file_name
           - sed 'p' file_name       ( print output twice )
           - sed '5d' file_name      ( delete the line - 4,7d-from 4to 7 delete )
           - sed -i.back '4d' file_name  ( it will make backup file before deleting )
           - sed 's/maroof/mrf' file_name  ( it will replace maroof to mrf in file, s - substitute )
           - sed -i.back 's/maroof/mrf/g' file_name  ( It make changes originally in final globally )
           - sed '/Line/s/maroof/mrf/g' file_name  ( Line is text present in file line for search that line it put )
          
           
       - Insertion & deletion
       
           - sed -i '1i ----This is file-----' fileB
              To insert any line in file, 1i- Before the 1st line content file_namme
           - sed -i '2a ---End----' file_name   ( after the line ) 
           - 
          
   LS > File_name    ( single > means override the new things ) 
   
    it wil copy all the file of that loc into specified filename
    
    1.- maroof-56@maroof-56-VirtualBox:~/myscripts$ ls > all_file.txt
    
maroof-56@maroof-56-VirtualBox:~/myscripts$ cat all_file.txt 
01_basic.sh

    2. date > allfile.txt
    
     maroof-56@maroof-56-VirtualBox:~/myscripts$ date > all_file.txt
      
maroof-56@maroof-56-VirtualBox:~/myscripts$ cat all_file.txt 
Thu Nov  7 04:01:59 PM IST 2024

      
    ***- See it will remove the previous things & add that new command reult.
    
    
   LS >> file_name   ( >>  to append ,means also wants previous one )
   
     pwd >> alfiles.txt
     
     
    *** - both result is available 
       maroof-56@maroof-56-VirtualBox:~/myscripts$ pwd >> all_file.txt 
       
maroof-56@maroof-56-VirtualBox:~/myscripts$ cat all_file.txt 
Thu Nov  7 04:01:59 PM IST 2024
/home/maroof-56/myscripts



     &> /dev/null 
    
    
      if u dont want print the output of a command on terminal or write in file , u can redirect output to /dev/null
      
      means output will vanish 
      
      
      
      ex;
      
      maroof-56@maroof-56-VirtualBox:~/myscripts$ cd /root/
bash: cd: /root/: Permission denied

maroof-56@maroof-56-VirtualBox:~/myscripts$ cd /root/ &> /dev/null

     *** see nothing prints after that
     
     - U can use this in any file 
     
     
     
     
     IF U WANT TO SEE DEBUGGING PROCESS OF SCRIPT
     
       - set -x 
       
       Put it at top of script to view each process line by line 
       
       
     If you want to exit script when a commands fails 
     
       - set -e
       
       
       
     BACKGROUND PROCESS 
     
     
        - nohup 
        
        if u have an script  to test & it will take too much time , in such case ur not able to use terminal until the script finish 
        
        so to background the process use nohup to easily use terminal for other use.
        
        syntax
        
        - nohup ./file_name & 
        
        
        
        Example :
         maroof-56@maroof-56-VirtualBox:~/myscripts$ nohup bash ./15_forloop_with_file.sh &

        
         maroof-56@maroof-56-VirtualBox:~/myscripts$ nohup: ignoring input and appending output to 'nohup.out'

         The process is running in the backgrround & output is stored in nohup.out file
         
         
         
         AUTOMATE  THE TASK 
         
          ONE TIME 
        - to execute script only one time use at
         
         ex : at 23:03 PM  (press enter)
         file_name 
         ( it will schedule your task at that time )
         
        - to check scheddule  task 
        
         atq (type )
         
        - to remove the schedule 
        
         atrm id
         
         
           REPETITIVE TAK
            CRONTAB 
           
            - crontab -l   ( to see existing )
            - crontab -e   ( to create )
           
